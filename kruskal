// C program to implement Kruskalâ€™s algorithm
#include <stdio.h>

#define MAX 10
#define INF 999

int cost[MAX][MAX], n, t[MAX][2], sum;

void kruskal(int cost[MAX][MAX], int n);
int find(int parent[MAX], int i);
void sortEdges(int edges[MAX][3], int e);

int main() {
    int i, j;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    kruskal(cost, n);

    printf("Edges of the minimal spanning tree:\n");
    for (i = 0; i < n - 1; i++) {
        printf("(%d, %d) ", t[i][0], t[i][1]);
    }
    printf("\nSum of minimal spanning tree: %d\n", sum);

    return 0;
}

void kruskal(int cost[MAX][MAX], int n) {
    int parent[MAX];
    int edges[MAX * MAX][3]; // to store edges as (u, v, weight)
    int e = 0; // number of edges in the graph

    
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (cost[i][j] != 0 && cost[i][j] != INF) {
                edges[e][0] = i;
                edges[e][1] = j;
                edges[e][2] = cost[i][j];
                e++;
            }
        }
    }

    // Sort edges by weight (ascending order)
    sortEdges(edges, e);

    // Initialize parent array for Union-Find
    for (int i = 0; i < n; i++) {
        parent[i] = i;
    }

    sum = 0;
    int k = 0;
    int count = 0;

    // Process edges in sorted order
    while (count < n - 1 && k < e) {
        int u = edges[k][0];
        int v = edges[k][1];
        int weight = edges[k][2];

        // Check if including this edge forms a cycle
        if (find(parent, u) != find(parent, v)) {
            // Union operation
            parent[find(parent, u)] = find(parent, v);
            t[count][0] = u;
            t[count][1] = v;
            sum += weight;
            count++;
        }
        k++;
    }
}

int find(int parent[MAX], int i) {
    if (parent[i] != i) {
        parent[i] = find(parent, parent[i]);  // Path compression
    }
    return parent[i];
}

void sortEdges(int edges[MAX * MAX][3], int e) {
    int i, j;
    // Simple bubble sort to sort edges by weight
    for (i = 0; i < e - 1; i++) {
        for (j = 0; j < e - i - 1; j++) {
            if (edges[j][2] > edges[j + 1][2]) {
                // Swap the edges
                int temp[3];
                temp[0] = edges[j][0];
                temp[1] = edges[j][1];
                temp[2] = edges[j][2];

                edges[j][0] = edges[j + 1][0];
                edges[j][1] = edges[j + 1][1];
                edges[j][2] = edges[j + 1][2];

                edges[j + 1][0] = temp[0];
                edges[j + 1][1] = temp[1];
                edges[j + 1][2] = temp[2];
            }
        }
    }
}

