#include <stdio.h>

int a[10][10], n, t[10], indegree[10];
int stack[10], top = -1;

void computeIndegree(int, int[][10]);
void tps_SourceRemoval(int, int[][10]);

int main() {
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    int i, j;
    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    computeIndegree(n, a);
    tps_SourceRemoval(n, a);

    printf("Topological Sort: ");
    for (i = 0; i < n; i++) {
        printf("%d ", t[i]);
    }

    return 0;
}

void computeIndegree(int n, int a[][10]) {
    int i, j;
    for (i = 0; i < n; i++) {
        indegree[i] = 0;  // Initialize indegree for each node
        for (j = 0; j < n; j++) {
            // Sum up incoming edges for each node
            if (a[j][i] != 0) {
                indegree[i]++;
            }
        }
    }
}

void tps_SourceRemoval(int n, int a[][10]) {
    int i, j, v;
    // Find all nodes with zero indegree and add them to the stack
    for (i = 0; i < n; i++) {
        if (indegree[i] == 0) {
            stack[++top] = i;
        }
    }

    int k = 0;  // This will store the topological sort order
    while (top != -1) {
        v = stack[top--];  // Pop from stack
        t[k++] = v;        // Store the node in the result

        // Decrease the indegree of adjacent nodes
        for (i = 0; i < n; i++) {
            if (a[v][i] != 0) {  // If there's an edge v -> i
                indegree[i]--;
                if (indegree[i] == 0) {  // If indegree becomes 0, push i to stack
                    stack[++top] = i;
                }
            }
        }
    }
}

