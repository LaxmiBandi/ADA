#include <stdio.h>
#include <time.h>

void warshall(int a[100][100], int n) {
    int R[n][n];

    // Copying the adjacency matrix to R
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            R[i][j] = a[i][j];
        }
    }

    // Warshall's Algorithm for transitive closure
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                R[i][j] = R[i][j] || (R[i][k] && R[k][j]);
            }
        }
    }

    // Printing the resulting path matrix
    printf("Printing the path matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", R[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n, a[100][100];
    printf("n>> ");
    scanf("%d", &n);

    // Reading the adjacency matrix
    printf("Enter adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    // Start measuring time
    clock_t start_time = clock();

    // Calling Warshall's function
    warshall(a, n);

    // End measuring time
    clock_t end_time = clock();

    // Calculate the time taken for the algorithm
    double time_taken = (double)(end_time - start_time) / CLOCKS_PER_SEC;

    // Displaying time complexity and execution time
    printf("\nTime Complexity of Warshall's Algorithm: O(n^3)\n");
    printf("Execution Time: %f seconds\n", time_taken);

    return 0;
}
